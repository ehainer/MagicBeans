@function is-numeric($values) {
	$number: true;
	@each $value in $values {
		@if type-of($value) != number {
			$number: false;
		}
	}
	@return $number;
}

@function is-map($value) {
	@return (type-of($value) == "map" or $value == ());
}

@function is-of-numeric-type($values, $type) {
	$valid: true;
	@each $value in $values {
		@if type-of($value) != number {
			$valid: false;
		} @else if unit($value) != $type {
			$valid: false;
		}
	}
	@return $valid;
}

@function map-try($map, $key, $default) {
	@if map-has-key($map, $key) {
		@return map-get($map, $key);
	} @else {
		@return map-get($map, $default);
	}
}

@function map-value($map, $key, $default) {
	@if map-has-key($map, $key) {
		@return map-get($map, $key);
	} @else {
		@return $default;
	}
}

@function mapped($map, $key) {
	@if map-has-key($map, $key) {
		@return map-get($map, $key);
	} @else {
		@return ();
	}
}

@function map-deep-merge($source-map, $merge-map) {
	$new: ();
	$keys-map: map-merge($source-map, $merge-map);
	@each $key, $value in $keys-map {
		@if type-of($value) == "map" {
			$new: map-merge($new, ($key: map-deep-merge(mapped($source-map, $key), mapped($merge-map, $key))));
		} @else {
			@if map-has-key($source-map, $key) {
				$new: map-merge($new, ($key: map-get($source-map, $key)));
			} @else {
				$new: map-merge($new, ($key: map-get($merge-map, $key)));
			}
		}
	}
	@return $new;
}

@function map-source($map, $key) {
	$defaults: mapped($map, default);

	@if map-has-key($map, $key) {
		@return map-deep-merge(mapped($map, $key), $defaults);
	} @else {
		@return $defaults;
	}
}

@mixin map-css($map, $key) {
	$map: mapped($map, $key);

	@each $property, $value in $map {
		@if is-map($value) {
			@if contains((hover focus active disabled), $property) {
				&:#{$property}, &.pseudo-#{$property} {
					@include map-css($map, $property);
				}
			}
			@if contains((before, after), $property) {
				&:#{$property} {
					@include map-css($map, $property);
				}
			}
		} @else if is-of-numeric-type($value, rem) {
			@include rem($property, $value);
		} @else {
			#{$property}: $value;
		}
	}
}

@mixin select-css($input) {
	$container: mapped($input, container);
	$select: mapped($input, select);
	$option: mapped($select, option);
	$search: mapped($select, search);
	$choice: mapped($select, choice);
	$padding: extract-padding($input, container);

	&.select2-container--multiple {
		padding-bottom: 0;
		.select2-search {
			@include rem(margin-bottom, map-get($padding, bottom));
		}
	}

	&.select2-container--single {
		.select2-search { @include map-css($search, container); }
		.select2-search__field { @include map-css($search, input); }
	}

	&.select2-container--focus { @include map-css($container, focus); }

	.select2-selection__choice {
		@include map-css($choice, container);
		@include rem(line-height, $base-line-height);
		@include rem(margin-bottom, map-get($padding, bottom));
	}

	.select2-results__option { @include map-css($select, option); }

	.select2-dropdown { @include map-css($select, dropdown); }

	.select2-results__option {
		@include map-css($option, container);

		&.select2-results__option--highlighted {
			@include map-css($option, hover);
		}

		&.select2-results__option[aria-selected="true"] {
			@include map-css($option, selected);
		}

		&.select2-results__option[aria-disabled="true"] {
			@include map-css($option, disabled);
		}
	}
}

@mixin multiselect-css($input) {
	$multiselect: mapped($input, multiselect);
	$choice: mapped($multiselect, choice);
	$option: mapped($multiselect, option);
	$delete: mapped($choice, delete);
	@include map-css($multiselect, container);
	.search-choice {
		$padding: extract-padding($choice, container);
		@include map-css($choice, container);
		padding-right: 0;
		span {
			@include rem(padding-right, (to-px((map-get($padding, right) * 2)) + to-px(map-value($delete, width, 10px))));
		}
		.search-choice-close {
			width: map-value($delete, width, 10px);
			height: map-value($delete, height, 10px);
			right: map-get($padding, right);
			@include icon(map-value($delete, icon, cross), $width: map-value($delete, width, 10px), $height: map-value($delete, height, 10px), $color: map-value($delete, color, #FFFFFF));
		}
	}
	.search-field {
		@include map-css($multiselect, search);
	}
	.chosen-search-input {
		@include placeholder($input, placeholder);
	}
	&.chosen-with-drop {
		.chosen-results {
			@include map-css($multiselect, results);
			li {
				@include map-css($option, container);
				&.highlighted {
					@include map-css($option, hover);
				}
				&.result-selected {
					@include map-css($option, selected);
				}
				&.result-disabled {
					@include map-css($option, disabled);
				}
			}
		}
	}
}

@mixin calendar-css($calendar) {
	$time: mapped($calendar, time);
	$next: mapped($calendar, next);
	$prev: mapped($calendar, prev);
	$list: mapped($time, list);

	@include map-css($calendar, container);

	.calendar {
		.month {
			@include map-css($calendar, month);
		}

		.dow {
			@include map-css($calendar, dow);
		}

		.date {
			$date: mapped($calendar, date);
			@include map-css($calendar, date);

			&.available {
				@include map-css($date, available);
			}

			&.disabled {
				@include map-css($date, disabled);
			}

			&.off {
				@include map-css($date, off);
			}

			&.start-date {
				@include map-css($date, start);
			}

			&.end-date {
				@include map-css($date, end);
			}

			&.start-date.end-date {
				border: none;
				&:before {
					@include map-css($date, start);
					content: "";
					position: absolute;
					top: 0;
					left: 0;
					width: 50%;
					height: 100%;
					border-right-color: transparent;
						border-top-right-radius: 0;
						border-bottom-right-radius: 0;
				}
				&:after {
					@include map-css($date, end);
					content: "";
					position: absolute;
					top: 0;
					right: 0;
					width: 50%;
					height: 100%;
					border-left-color: transparent;
						border-top-left-radius: 0;
						border-bottom-left-radius: 0;
				}
			}

			&.in-range {
				@include map-css($date, range);
			}

			.mini-date {
				@include map-css($date, tooltip);
				$tooltip: mapped($date, tooltip);
				&:before {
					border-bottom-color: map-try($tooltip, background-color, background);
				}
			}
		}

		.next {
			@include map-css($calendar, next);
			$arrow: mapped($next, arrow);
			&:before {
				content: "";
				position: absolute;
				top: 0;
				left: 0;
				width: 100%;
				height: 100%;
				@include icon(map-value($arrow, icon, arrow-right), $width: map-value($arrow, width, 15px), $height: map-value($arrow, height, 15px), $color: map-value($arrow, color, #000000));
			}
		}

		.prev {
			@include map-css($calendar, prev);
			$arrow: mapped($prev, arrow);
			&:before {
				content: "";
				position: absolute;
				top: 0;
				left: 0;
				width: 100%;
				height: 100%;
				@include icon(map-value($arrow, icon, arrow-left), $width: map-value($arrow, width, 15px), $height: map-value($arrow, height, 15px), $color: map-value($arrow, color, #000000));
			}
		}
	}

	.calendar-time {
		@include map-css($calendar, time);

		.daterangepicker-time-input {
			@include map-css($time, input);
		}

		.daterangepicker-time-options {
			@include map-css($time, list);
			li {
				@include map-css($list, option);
				$option: mapped($list, option);
				&.disabled {
					@include map-css($option, disabled);
				}
			}
		}
	}

	.table-condensed {
		border-collapse: separate;
	}
}

@mixin value-from($source, $type, $key, $property) {
	$target: mapped($source, $type);
	$default: mapped($source, default);
	$set: ();

	@if map-has-key($target, $key) {
		$set: mapped($target, $key);
	} @else if map-has-key($default, $key) {
		$set: mapped($default, $key);
	}

	@if map-has-key($set, $property) {
		#{$property}: map-get($set, $property);
	}
}

@function extract-side-value($list, $side) {
	$listLength: length($list);
	@if $listLength == 1 {
		@return nth($list, 1);
	} @else if $listLength == 2 {
		@if $side == top or $side == bottom {
			@return nth($list, 1);
		} @else {
			@return nth($list, 2);
		}
	} @else if $listLength == 3 {
		@if $side == top {
			@return nth($list, 1);
		} @else if $side == bottom {
			@return nth($list, 3);
		} @else {
			@return nth($list, 2);
		}
	} @else if $listLength == 4 {
		@if $side == top {
			@return nth($list, 1);
		} @else if $side == right {
			@return nth($list, 2);
		} @else if $side == bottom {
			@return nth($list, 3);
		} @else {
			@return nth($list, 4);
		}
	}
	@return 0;
}

@function to-px($values) {
	$font-size: $base-font-size;
	$px-values: ();
	@each $value in $values {
		@if $value == 0 or $value == 0px {
			$px-values: join($px-values, 0);
		} @else if type-of($value) == number and not unitless($value) and (unit($value) == px) {
			$px-values: join($px-values, round($value));
		} @else if type-of($value) == number and not unitless($value) and (unit($value) == "%") {
			$px-values: join($px-values, #{$value});
		} @else if $value == auto {
			$px-values: join($px-values, auto);
		} @else {
			$value: $value / ($value * 0 + 1);
			$px-values: join($px-values, round($value * $font-size));
		}
	}

	@return nth($px-values, 1);
}

@function contains($list, $var) {
	@return not (null == index($list, $var));
}

/**
 * @see https://css-tricks.com/snippets/sass/strip-unit-function/
 */
@function strip-unit($number) {
	@if type-of($number) == 'number' and not unitless($number) {
		@return $number / ($number * 0 + 1);
	}

	@return $number;
}

@mixin clearfix {
	&:before, &:after {
		content: " ";
		display: table;
	}

	&:after {
		clear: both;
	}

	*zoom: 1;
}

@function extract-padding($map, $key: null) {
	$css: ();

	@if $key == null {
		$css: ( padding: $map );
	} @else {
		$css: mapped($map, $key);
	}

	$top: 0;
	$right: 0;
	$bottom: 0;
	$left: 0;

	@if map-has-key($css, padding) {
		$value: map-get($css, padding);
		$listLength: length($value);
		@if $listLength == 1 {
			$top: nth($value, 1);
			$right: nth($value, 1);
			$bottom: nth($value, 1);
			$left: nth($value, 1);
			@return ( top: $top, right: $right, bottom: $bottom, left: $left );
		} @else if $listLength == 2 {
			$top: nth($value, 1);
			$right: nth($value, 2);
			$bottom: nth($value, 1);
			$left: nth($value, 2);
			@return ( top: $top, right: $right, bottom: $bottom, left: $left );
		} @else if $listLength == 3 {
			$top: nth($value, 1);
			$right: nth($value, 2);
			$bottom: nth($value, 3);
			$left: nth($value, 2);
			@return ( top: $top, right: $right, bottom: $bottom, left: $left );
		} @else if $listLength == 4 {
			$top: nth($value, 1);
			$right: nth($value, 2);
			$bottom: nth($value, 3);
			$left: nth($value, 4);
			@return ( top: $top, right: $right, bottom: $bottom, left: $left );
		}
	}

	@if map-has-key($css, padding-top) {
		$top: map-get($css, padding-top);
	}
	@if map-has-key($css, padding-right) {
		$right: map-get($css, padding-right);
	}
	@if map-has-key($css, padding-bottom) {
		$bottom: map-get($css, padding-bottom);
	}
	@if map-has-key($css, padding-left) {
		$left: map-get($css, padding-left);
	}

	@return ( top: $top, right: $right, bottom: $bottom, left: $left );
}

/**
 * @see http://davidensinger.com/2013/03/using-rems-with-sass/
 */
@mixin rem($property, $values) {
	$font-size: $base-font-size;
	$px-values: ();
	$rem-values: ();
	@each $value in $values {
		@if $value == 0 or $value == 0px {
			$px-values: join($px-values, 0);
			$rem-values: join($rem-values, 0);
		} @else if type-of($value) == number and not unitless($value) and (unit($value) == px) {
			$new-rem-value: $value / $font-size;
			$px-values: join($px-values, round($value));
			$rem-values: join($rem-values, unquote("#{$new-rem-value}rem"));
		} @else if type-of($value) == number and not unitless($value) and (unit($value) == "%") {
			$px-values: join($px-values, #{$value});
			$rem-values: join($rem-values, #{$value});
		} @else if $value == auto {
			$px-values: join($px-values, auto);
			$rem-values: join($rem-values, auto);
		} @else {
			@if type-of($value) == number {
				$value: $value / ($value * 0 + 1);
				$px-values: join($px-values, round($value * $font-size));
				$rem-values: join($rem-values, unquote("#{$value}rem"));
			} @else {
				$px-values: join($px-values, $value);
				$rem-values: join($rem-values, $value);
			}
		}
	}

	#{$property}: $px-values;
	#{$property}: $rem-values;
}

@mixin property-from-state($map, $state, $prop) {
	@if map-has-key($map, $state) {
		$nested: map-get($map, $state);
		@each $property in $prop {
			@if map-has-key($nested, $property) {
				#{$property}: map-get($nested, $property);
			}
		}
	}
}

@mixin placeholder($map, $key) {
	&.placeholder {
		@include map-css($map, $key);
	}
	&::-webkit-input-placeholder {
		@include map-css($map, $key);
	}
	&::-moz-placeholder {
		@include map-css($map, $key);
	}
	&::-ms-placeholder {
		@include map-css($map, $key);
	}
	&::placeholder {
		@include map-css($map, $key);
	}
}

@mixin tooltip($type) {
	$tooltip: map-get($tooltips, $type);
	@each $property, $value in $tooltip {
		@if $property == point {
			&:after {
				$point: $value;
				$size: map-get($point, size);
				$background: map-try($point, background-color, background);
				@if map-get($point, direction) == down {
					@include rem(border-right-size, $size);
					border-left: 0 solid transparent;
					border-right-style: solid;
					border-right-color: transparent;
					border-top: $size solid $background;
					top: 100%;
				} @else if map-get($point, direction) == up {
					@include rem(border-right-size, $size);
					border-left: 0 solid transparent;
					border-right-style: solid;
					border-right-color: transparent;
					border-bottom: $size solid $background;
					bottom: 100%;
				}

				@if map-get($point, side) == right {
					@include rem(right, 1rem);
					left: auto;
				}
			}
		} @else {
			@if is-of-numeric-type($value, rem) {
				@include rem($property, $value);
			} @else {
				#{$property}: $value;
			}
		}
	}
}

@mixin input($type) {
	$input: map-source($inputs, $type);

	@if $type == default {

		@include map-css($input, container);
		@include placeholder($input, placeholder);

		&.select2 { @include select-css($input); }

	} @else {

		&.input-#{$type} {

			@include map-css($input, container);
			@include placeholder($input, placeholder);

			&.select2 { @include select-css($input); }

			&.icon-left {
				$size: map-value(mapped($input, container), line-height, $base-line-height);
				$padding: extract-padding($input, container);
				@include rem(padding-left, ((map-get($padding, left) + map-get($padding, top)) + $size));
				background-size: $size;
				background-position: left map-get($padding, left) center;
			}

			&.icon-right {
				$size: map-value(mapped($input, container), line-height, $base-line-height);
				$padding: extract-padding($input, container);
				@include rem(padding-right, ((map-get($padding, right) + map-get($padding, top)) + $size));
				background-size: $size;
				background-position: right map-get($padding, right) center;
			}
		}
	}

	@content;
}

@mixin button($type) {
	$button: map-get($buttons, $type);

	@if map-has-key($button, transitions) {
		transition: map-get($button, transitions);
	}

	@each $property, $value in $button {
		@if contains((hover focus active), $property) {
			&:not([disabled]):#{$property}, &.pseudo-#{$property} {
				@each $nested-property, $nested-value in $value {
					@if is-of-numeric-type($nested-value, rem) {
						@include rem($nested-property, $nested-value);
					} @else {
						#{$nested-property}: $nested-value;
					}
				}
			}
		} @else if $property != loader {
			@if is-of-numeric-type($value, rem) {
				@include rem($property, $value);
			} @else {
				#{$property}: $value;
			}
		}
	}

	// If focus styles were not provided but hover styles were, include hover styles as focus for ADA compliance
	@if not map-has-key($button, focus) and map-has-key($button, hover) {
		&:focus {
			@each $nested-property, $nested-value in map-get($button, hover) {
				@if is-of-numeric-type($nested-value, rem) {
					@include rem($nested-property, $nested-value);
				} @else {
					#{$nested-property}: $nested-value;
				}
			}
		}
	}

	@if map-has-key($button, loader) {
		$loader: map-get($button, loader);
		&.thinking, &.thinking:hover {
			@each $property, $value in $button {
				@if not contains((loader hover focus active), $property) {
					@if is-of-numeric-type($value, rem) {
						@include rem($property, $value);
					} @else {
						#{$property}: $value;
					}
				}
			}
			.spinner > span {
				background-color: map-try($loader, dot-color, #FFFFFF);
			}
		}
	}
}

@mixin button-size($type) {
	$size: map-get($button-sizes, $type);
	@each $property, $value in $size {
		@if is-of-numeric-type($value, rem) {
			@include rem($property, $value);
		} @else {
			#{$property}: $value;
		}
	}
}

@mixin scrollbar($type) {
	$scrollbar: map-get($scrollbars, $type);

	@each $property, $value in $scrollbar {
		&.chosen-container .chosen-results::-webkit-#{$property},
		&::-webkit-#{$property} {
			@include map-css($scrollbar, $property);
		}
	}
}

@mixin radio($type) {
	&:not(#foo) {
		$radio: map-get($radios, $type);
		$width: map-value($radio, width, $base-font-size);
		$height: map-value($radio, height, $base-font-size);
		$checked: map-value($radio, checked, ( color: #234051, border: #234051 ));
		$line-height: map-value($radio, line-height, $base-line-height);
		& + label {
			padding-left: to-px($width) + 6px;
			@if map-has-key($radio, line-height) {
				@include rem(line-height, map-get($radio, line-height));
			}
			&:before {
				@if map-has-key($radio, transitions) {
					transition: map-get($radio, transitions);
				}
				box-shadow: inset 0 0 0 map-value($radio, gap-width, 3px) transparent;
				border-radius: 50%;
				content: '';
				background: transparent;
				border: map-value($radio, border-width, 2px) solid map-value($radio, border-color, #CCCCCC);
				display: inline-block;
				width: $width;
				height: $height;
				text-align: center;
				vertical-align: top;
				margin-top: floor((to-px($line-height) - to-px($height))/2);
				margin-left: -(to-px($width) + 6px);
				margin-right: 6px;
			}
		}
		&:checked + label:before {
			background-color: map-value($checked, color, #000000);
			border: map-value($radio, border-width, 2px) solid map-value($checked, border, #000000);
			box-shadow: inset 0 0 0 map-value($radio, gap-width, 3px) map-value($radio, gap-color, #FFFFFF);
		}
	}
}

@mixin checkbox($type) {
	&:not(#foo) {
		$checkbox: map-get($checkboxes, $type);
		$width: map-value($checkbox, width, $base-font-size);
		$height: map-value($checkbox, height, $base-font-size);
		$checked: map-value($checkbox, checked, ( color: #234051, border: #234051 ));
		$line-height: map-value($checkbox, line-height, $base-line-height);
		& + label {
			padding-left: to-px($width) + 6px;
			@if map-has-key($checkbox, line-height) {
				@include rem(line-height, map-get($checkbox, line-height));
			}
			&:before {
				@if map-has-key($checkbox, transitions) {
					transition: map-get($checkbox, transitions);
				}
				box-shadow: inset 0 0 0 map-value($checkbox, gap-width, 3px) transparent;
				content: '';
				background: transparent;
				border: map-value($checkbox, border-width, 2px) solid map-value($checkbox, border-color, #CCCCCC);
				display: inline-block;
				width: $width;
				height: $height;
				text-align: center;
				vertical-align: top;
				margin-top: floor((to-px($line-height) - to-px($height))/2);
				margin-left: -(to-px($width) + 6px);
				margin-right: 6px;
			}
		}
		&:checked + label:before {
			@if map-has-key($checkbox, icon) {
				@include icon(map-value($checkbox, icon, cross), $width: 10px, $height: 10px);
				border: map-value($checkbox, border-width, 2px) solid map-value($checked, border, #000000);
			} @else {
				background-color: map-value($checked, color, #000000);
				border: map-value($checkbox, border-width, 2px) solid map-value($checked, border, #000000);
				box-shadow: inset 0 0 0 map-value($checkbox, gap-width, 3px) map-value($checkbox, gap-color, #FFFFFF);
			}
			background-size: 90%;
		}
	}
}

@mixin icon($icon, $fallback: null, $width: null, $height: null, $color: null) {
	background-size: 100%;
	@if $width == null {
		$width: to-px($base-line-height) - to-px(0.2rem);
	}
	@if $height == null {
		$height: to-px($base-line-height) - to-px(0.2rem);
	}
	$size: "#{strip-unit($width)}x#{strip-unit($height)}";
	background-position: center center;
	background-repeat: no-repeat;
	background-image: svg-icon($icon, $fallback, $size, $color);
}

@mixin upload($type) {
	$upload: map-get($uploads, $type);

	@if map-has-key($upload, transitions) {
		transition: map-get($upload, transitions);
	}

	@each $property, $value in $upload {
		@if contains((over max error), $property) {
			@if $property == over {
				&.over {
					@each $nested-property, $nested-value in $value {
						@if is-of-numeric-type($nested-value, rem) {
							@include rem($nested-property, $nested-value);
						} @else {
							#{$nested-property}: $nested-value;
						}
					}
				}
			}

		} @else {
			@if is-of-numeric-type($value, rem) {
				@include rem($property, $value);
			} @else {
				#{$property}: $value;
			}
		}
	}
}

@mixin tooltip($type) {
	$tooltip: map-get($tooltips, $type);

	$point: map-value($tooltip, point, ());
	$point-size: map-value($point, size, 10px);
	$point-side: map-value($point, side, left);
	$background: map-try($tooltip, background-color, background);
	$border-width-list: map-try($tooltip, border-width, border);
	$border-color-list: map-try($tooltip, border-color, border);
	$border-width: 0;
	$border-color: none;

	@if length($border-width-list) == 3 {
		$border-width: nth($border-width-list, 1);
	} @else if length($border-width-list) == 1 and is-numeric(nth($border-width-list, 1)) {
		$border-width: $border-width-list;
	}

	@if length($border-color-list) == 3 {
		$border-color: nth($border-color-list, 3);
	} @else if length($border-color-list) == 1 {
		$border-color: $border-color-list;
	}

	margin-bottom: $point-size;

	@each $property, $value in $tooltip {
		@if not ($property == point) {
			@if is-of-numeric-type($value, rem) {
				@include rem($property, $value);
			} @else {
				#{$property}: $value;
			}
		}
	}

	&:after, &:before {
		@include rem($point-side, 1rem);
		content: " ";
		position: absolute;
		top: 100%;
		width: 0;
		height: 0;
	}
	&:after {
		border-left: 0 solid transparent;
		border-right: ($point-size - $border-width) solid transparent;
		border-top: ($point-size - if($border-width > 0, $border-width, 0)) solid $background;
	}

	@if ($border-width != none) and ($border-width > 0) {
		border: $border-width solid $border-color;
		&:before {
			border-left: 0 solid transparent;
			border-right: ($point-size + $border-width + 1) solid transparent;
			border-top: ($point-size + $border-width + 1) solid $border-color;
			margin-left: -($border-width);
		}
	}
}

@mixin dialog($type) {
	@if $type != default {

		&.dialog-#{$type} {

			$dialog: map-source($dialogs, $type);

			@include map-css($dialog, container);

			.dialog-header {
				@include map-css($dialog, header);
			}

			.dialog-body {
				@include map-css($dialog, body);
			}

			.dialog-footer {
				@include map-css($dialog, footer);
			}

			.dialog-error {
				@include map-css($dialog, error);
			}

			@content;
		}
	}
}

@mixin overlay($type) {
	@if $type != default {
		&.overlay-#{$type} {
			$overlay: map-source($dialogs, $type);

			@include map-css($overlay, overlay);

			@content;
		}
	}
}

@mixin calendar($type) {
	@if $type == default {
		$calendar: mapped($calendars, default);
		&.daterangepicker {
			@include calendar-css($calendar);
		}
	} @else {
		$calendar: map-source($calendars, $type);
		&.daterangepicker.calendar-#{$type} {
			@include calendar-css($calendar);
		}
	}

	@content;
}

@mixin input2($type) {
	&.input-#{$type}, .input-#{$type} {
		@content;
	}
}